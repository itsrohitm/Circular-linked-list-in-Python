class Node:
       def __init__(self, value = None):
            self.value = value
            self.next = None
            self.prev = None

#Create a circular doubly linked list class to initialize head and tail references
class CDoublyLinkedList:
       def __init__(self):
            self.head = None
            self.tail = None
       def createCDLL(self, value):
            new_node = Node(value)
            new_node.next = None
            new_node.prev = None
            self.head = new_node
            self.tail = new_node
            print("The circular doubly linked list has been created.")
       #Function to add node in the beginning
       def atBeg(self, value):
            new_node =  Node(value)
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
            self.tail.next = self.head
            self.head.prev = self.tail
       #Function to print data or value
       def printForwardList(self):
        if self.head == None:
            print("The linked list does not exist.")
        else:
            temp_node = self.head
            while temp_node:
                print(temp_node.value)
                if temp_node == self.tail:
                    break
                temp_node = temp_node.next
       #Function search data or value
       def searchList(self, value):
         position = 0
         found = 0
         if self.head is None:
            print("The linked list does not exist")
         else:
            temp_node = self.head
            while temp_node:
                position = position + 1
                if temp_node.value == value:
                    print("The required value was found at position: " + str(position))
                    found = 1
                    break
                if temp_node == self.tail:
                    print("The required value does not exist in the list")
                    break
                temp_node = temp_node.next
       #Function to delete node from the beginning
       def delBeg(self):
        if(self.head == None):
            return
        elif (self.head.next == self.tail.next):
            self.head = self.tail = None
            return
        elif (self.head is not None):
            next_node = self.head.next
            next_node.prev = None
            self.head = next_node
            self.tail.next = self.head
            self.head.prev = self.tail
            return 
                
cdll=CDoublyLinkedList()
cdll.createCDLL(10)
cdll.atBeg(20)
cdll.atBeg(30)
cdll.atBeg(40)
cdll.printForwardList()
print(cdll.searchList(10))
cdll.delBeg()
print("List content after Deleting :")
cdll.printForwardList()
